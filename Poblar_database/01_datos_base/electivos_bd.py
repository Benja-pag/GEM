#!/usr/bin/env python
"""
Script para poblar las asignaturas electivas en la base de datos
Crea asignaturas electivas para 3¬∞ y 4¬∞ medio con sus docentes asignados
"""

import os
import sys
import django
import random

# Agregar el directorio ra√≠z del proyecto al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GEM.settings')
django.setup()

from Core.models import Asignatura, AsignaturaImpartida, Docente, Especialidad

def poblar_electivos():
    """Pobla las asignaturas electivas para 3¬∞ y 4¬∞ medio"""
    print("üéØ Poblando asignaturas electivas...")
    
    # Verificar si ya existen electivos
    electivos_existentes = Asignatura.objects.filter(es_electivo=True).count()
    if electivos_existentes > 0:
        print(f"‚ö†Ô∏è Ya existen {electivos_existentes} asignaturas electivas en la base de datos.")
        print("¬øDeseas continuar y crear nuevas asignaturas impartidas? (s/n): ", end="")
        respuesta = input().lower()
        if respuesta != 's':
            print("‚ùå Proceso cancelado.")
            return
    
    # Definir electivos por nivel
    electivos_por_nivel = {
        3: [
            'Matem√°ticas Aplicadas',
            'Literatura Avanzada', 
            'Historia del Arte',
            'Biolog√≠a Molecular',
            'F√≠sica Cu√°ntica',
            'Qu√≠mica Org√°nica',
            'Taller de Debate y Oratoria',
            'Programaci√≥n Avanzada'
        ],
        4: [
            'C√°lculo Avanzado',
            'Literatura Contempor√°nea',
            'Historia Universal',
            'Biolog√≠a Celular',
            'F√≠sica Moderna',
            'Qu√≠mica Anal√≠tica',
            'Taller de Redacci√≥n',
            'Desarrollo Web'
        ]
    }
    
    # Obtener docentes disponibles
    docentes = list(Docente.objects.all())
    if not docentes:
        print("‚ùå No hay docentes disponibles para asignar a electivos")
        return
    
    # Mapeo de especialidades para electivos
    mapeo_especialidades = {
        'Matem√°ticas Aplicadas': ['Matematicas', 'Fisica'],
        'C√°lculo Avanzado': ['Matematicas', 'Fisica'],
        'Literatura Avanzada': ['Lenguaje', 'Historia'],
        'Literatura Contempor√°nea': ['Lenguaje', 'Historia'],
        'Historia del Arte': ['Historia', 'Arte'],
        'Historia Universal': ['Historia'],
        'Biolog√≠a Molecular': ['Biologia', 'Quimica'],
        'Biolog√≠a Celular': ['Biologia', 'Quimica'],
        'F√≠sica Cu√°ntica': ['Fisica', 'Matematicas'],
        'F√≠sica Moderna': ['Fisica', 'Matematicas'],
        'Qu√≠mica Org√°nica': ['Quimica', 'Biologia'],
        'Qu√≠mica Anal√≠tica': ['Quimica', 'Biologia'],
        'Taller de Debate y Oratoria': ['Lenguaje'],
        'Taller de Redacci√≥n': ['Lenguaje'],
        'Programaci√≥n Avanzada': ['Tecnolog√≠a'],
        'Desarrollo Web': ['Tecnolog√≠a']
    }
    
    electivos_creados = 0
    asignaturas_impartidas_creadas = 0
    
    for nivel, electivos in electivos_por_nivel.items():
        print(f"\nüìö Creando electivos para {nivel}¬∞ medio:")
        
        for electivo_nombre in electivos:
            # Crear o obtener la asignatura electiva
            asignatura, created = Asignatura.objects.get_or_create(
                nombre=electivo_nombre,
                defaults={
                    'nivel': nivel,
                    'es_electivo': True
                }
            )
            
            if created:
                electivos_creados += 1
                print(f"  ‚úÖ Creada asignatura: {electivo_nombre}")
            
            # Buscar docente apropiado seg√∫n especialidad
            especialidades_buscadas = mapeo_especialidades.get(electivo_nombre, [])
            docente_asignado = None
            
            # Primero buscar docentes con especialidad exacta
            for especialidad_nombre in especialidades_buscadas:
                docentes_especialidad = [d for d in docentes if d.especialidad and d.especialidad.nombre == especialidad_nombre]
                if docentes_especialidad:
                    docente_asignado = random.choice(docentes_especialidad)
                    break
            
            # Si no hay docente con especialidad exacta, asignar uno aleatorio
            if not docente_asignado:
                docente_asignado = random.choice(docentes)
            
            # Crear c√≥digo √∫nico para evitar duplicados
            codigo_base = f"{electivo_nombre[:3].upper()}{nivel}E"
            codigo = codigo_base
            contador = 1
            
            # Verificar si el c√≥digo ya existe y generar uno √∫nico
            while AsignaturaImpartida.objects.filter(codigo=codigo).exists():
                codigo = f"{codigo_base}{contador}"
                contador += 1
            
            # Crear AsignaturaImpartida
            try:
                asignatura_imp, created = AsignaturaImpartida.objects.get_or_create(
                    asignatura=asignatura,
                    docente=docente_asignado,
                    defaults={'codigo': codigo}
                )
                
                if created:
                    asignaturas_impartidas_creadas += 1
                    print(f"    üìù Asignado docente: {docente_asignado.usuario.nombre} {docente_asignado.usuario.apellido_paterno} ({docente_asignado.especialidad.nombre if docente_asignado.especialidad else 'Sin especialidad'}) - C√≥digo: {codigo}")
                else:
                    print(f"    ‚ö†Ô∏è Ya existe: {electivo_nombre} con c√≥digo {asignatura_imp.codigo}")
                    
            except Exception as e:
                print(f"    ‚ùå Error creando {electivo_nombre}: {e}")
    
    print(f"\nüéâ ¬°Proceso completado!")
    print(f"üìä Resumen:")
    print(f"   ‚Ä¢ Asignaturas electivas creadas: {electivos_creados}")
    print(f"   ‚Ä¢ Asignaturas impartidas creadas: {asignaturas_impartidas_creadas}")
    print(f"   ‚Ä¢ Total de electivos disponibles: {Asignatura.objects.filter(es_electivo=True).count()}")

if __name__ == "__main__":
    poblar_electivos() 