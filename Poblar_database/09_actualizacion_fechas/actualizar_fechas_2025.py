#!/usr/bin/env python
"""
Script para actualizar las fechas de evaluaciones al a√±o actual (2025)
Parte del sistema de poblado de la base de datos
"""
import os
import sys
import django
from datetime import date

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GEM.settings')
django.setup()

from Core.models import Evaluacion

def actualizar_fechas_evaluaciones_2025():
    """
    Actualiza todas las fechas de evaluaciones al a√±o actual (2025)
    Mantiene el mes y d√≠a originales, solo cambia el a√±o
    """
    
    print("üîÑ [PASO 9] Actualizando fechas de evaluaciones a 2025...")
    
    # Obtener todas las evaluaciones
    evaluaciones = Evaluacion.objects.all()
    total = evaluaciones.count()
    
    print(f"üìä Total de evaluaciones encontradas: {total}")
    
    if total == 0:
        print("‚ùå No hay evaluaciones para actualizar")
        return True
    
    # Mostrar rango actual de fechas
    primera_eval = evaluaciones.first()
    ultima_eval = evaluaciones.last()
    print(f"üìÖ Rango actual: {primera_eval.fecha} a {ultima_eval.fecha}")
    
    # Verificar si ya est√°n en 2025
    if primera_eval.fecha.year == 2025:
        print("‚úÖ Las evaluaciones ya est√°n en 2025, no es necesario actualizar")
        return True
    
    # Actualizar fechas
    actualizadas = 0
    errores = 0
    a√±o_actual = 2025
    
    print(f"üîÑ Actualizando {total} evaluaciones al a√±o {a√±o_actual}...")
    
    for eval in evaluaciones:
        try:
            fecha_original = eval.fecha
            
            # Cambiar solo el a√±o a 2025, mantener mes y d√≠a
            nueva_fecha = date(a√±o_actual, fecha_original.month, fecha_original.day)
            
            # Actualizar la evaluaci√≥n
            eval.fecha = nueva_fecha
            eval.save()
            
            actualizadas += 1
            
            # Mostrar progreso cada 200 evaluaciones
            if actualizadas % 200 == 0:
                print(f"   ‚úÖ Progreso: {actualizadas}/{total} evaluaciones actualizadas")
                
        except Exception as e:
            print(f"   ‚ùå Error actualizando evaluaci√≥n {eval.id}: {e}")
            errores += 1
    
    print(f"\nüéâ Actualizaci√≥n de fechas completada!")
    print(f"   ‚úÖ Evaluaciones actualizadas: {actualizadas}")
    print(f"   ‚ùå Errores: {errores}")
    
    # Verificar el resultado
    if actualizadas > 0:
        primera_eval_nueva = Evaluacion.objects.first()
        ultima_eval_nueva = Evaluacion.objects.last()
        print(f"   üìÖ Nuevo rango: {primera_eval_nueva.fecha} a {ultima_eval_nueva.fecha}")
    
    return errores == 0

def main():
    """Funci√≥n principal para ejecutar el script independientemente"""
    try:
        exito = actualizar_fechas_evaluaciones_2025()
        if exito:
            print("‚úÖ Script completado exitosamente")
            sys.exit(0)
        else:
            print("‚ùå Script completado con errores")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 