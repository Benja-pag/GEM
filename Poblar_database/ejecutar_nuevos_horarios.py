import os
import django
import sys

# Agrega el directorio ra√≠z del proyecto al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configura el m√≥dulo de settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GEM.settings')
django.setup()

from asignaturas_impartidas_bd import crear_asignaturas_impartidas
from Core.models import Docente, Asignatura, Curso

def verificar_disponibilidad_docentes():
    """Verifica que hay suficientes docentes para las asignaturas obligatorias"""
    print("üîç Verificando disponibilidad de docentes...")
    
    # Obtener asignaturas obligatorias por nivel
    asignaturas_obligatorias = {
        1: ["Lenguaje", "Matem√°ticas", "Historia", "Biolog√≠a", "F√≠sica", "Qu√≠mica", "Ingl√©s", "Educaci√≥n F√≠sica", "Arte", "M√∫sica", "Tecnolog√≠a"],
        2: ["Lenguaje", "Matem√°ticas", "Historia", "Biolog√≠a", "F√≠sica", "Qu√≠mica", "Ingl√©s", "Educaci√≥n F√≠sica", "Arte", "M√∫sica", "Tecnolog√≠a"],
        3: ["Lenguaje", "Matem√°ticas", "Historia", "Biolog√≠a", "F√≠sica", "Qu√≠mica", "Ingl√©s", "Educaci√≥n F√≠sica", "Filosof√≠a"],
        4: ["Lenguaje", "Matem√°ticas", "Historia", "Biolog√≠a", "F√≠sica", "Qu√≠mica", "Ingl√©s", "Educaci√≥n F√≠sica", "Filosof√≠a"]
    }
    
    # Obtener docentes por especialidad
    docentes_por_especialidad = {}
    for docente in Docente.objects.select_related('especialidad').all():
        especialidad = docente.especialidad.nombre
        if especialidad not in docentes_por_especialidad:
            docentes_por_especialidad[especialidad] = []
        docentes_por_especialidad[especialidad].append(docente)
    
    print(f"üìä Docentes disponibles por especialidad:")
    for especialidad, docentes in docentes_por_especialidad.items():
        print(f"  - {especialidad}: {len(docentes)} docentes")
    
    # Verificar cobertura por nivel
    for nivel, asignaturas in asignaturas_obligatorias.items():
        print(f"\nüìö Nivel {nivel}:")
        for asignatura in asignaturas:
            # Buscar docentes que pueden impartir esta asignatura
            docentes_disponibles = []
            for especialidad, docentes in docentes_por_especialidad.items():
                if verificar_especialidad_docente(asignatura, especialidad):
                    docentes_disponibles.extend(docentes)
            
            if docentes_disponibles:
                print(f"  ‚úÖ {asignatura}: {len(docentes_disponibles)} docentes disponibles")
            else:
                print(f"  ‚ùå {asignatura}: SIN DOCENTES DISPONIBLES")
    
    return True

def verificar_especialidad_docente(nombre_asignatura, especialidad_docente):
    """Verifica si un docente puede impartir una asignatura seg√∫n su especialidad"""
    equivalencias = {
        "Matematicas": ["Matem√°ticas", "Matem√°tica Avanzada", "Matem√°ticas Discretas", "Estad√≠stica y An√°lisis de Datos"],
        "Lenguaje": ["Lenguaje", "Literatura y Escritura Creativa"],
        "Historia": ["Historia", "Historia del Arte y Cultura", "Sociolog√≠a y Estudios Sociales"],
        "Biologia": ["Biolog√≠a", "Biolog√≠a Avanzada", "Ciencias de la Tierra y Medio Ambiente"],
        "Fisica": ["F√≠sica", "F√≠sica Aplicada", "Astronom√≠a y Ciencias del Espacio"],
        "Quimica": ["Qu√≠mica", "Qu√≠mica Experimental"],
        "Ingles": ["Ingl√©s"],
        "Educaci√≥n Fisica": ["Educaci√≥n F√≠sica"],
        "Arte": ["Arte", "Historia del Arte y Cultura", "Teatro y Expresi√≥n Corporal"],
        "Tecnologia": ["Tecnolog√≠a", "Tecnolog√≠a e Innovaci√≥n", "Programaci√≥n y Rob√≥tica"],
        "Filosof√≠a y √âtica": ["Filosof√≠a", "Filosof√≠a y √âtica"],
        "Psicolog√≠a y Desarrollo Humano": ["Psicolog√≠a y Desarrollo Humano"],
        "M√∫sica y Composici√≥n": ["M√∫sica"],
        "Investigaci√≥n Cient√≠fica y M√©todo Experimental": ["Biolog√≠a Avanzada", "Qu√≠mica Experimental", "F√≠sica Aplicada"],
    }
    
    if especialidad_docente in equivalencias:
        return nombre_asignatura in equivalencias[especialidad_docente]
    
    return False

def main():
    """Funci√≥n principal que ejecuta el nuevo sistema de horarios"""
    print("üöÄ Iniciando nuevo sistema de horarios con bloques consecutivos")
    print("=" * 60)
    
    # Verificar disponibilidad de docentes
    verificar_disponibilidad_docentes()
    
    print("\n" + "=" * 60)
    print("üîÑ Creando asignaturas impartidas...")
    
    # Crear las asignaturas impartidas con el nuevo sistema
    crear_asignaturas_impartidas()
    
    print("\n" + "=" * 60)
    print("‚úÖ Proceso completado exitosamente!")
    print("\nüìã Resumen de mejoras implementadas:")
    print("  ‚úì Bloques consecutivos (2 bloques seguidos por asignatura)")
    print("  ‚úì Verificaci√≥n de conflictos entre profesores")
    print("  ‚úì Exclusi√≥n de asignaturas electivas")
    print("  ‚úì Verificaci√≥n de especialidades de docentes")
    print("  ‚úì Asignaci√≥n autom√°tica de salas especiales")
    print("  ‚úì Resoluci√≥n autom√°tica de conflictos de horarios")

if __name__ == "__main__":
    main() 