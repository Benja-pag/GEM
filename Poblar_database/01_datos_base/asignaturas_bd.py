import os
import django
import sys
from datetime import date

# Agrega el directorio ra√≠z del proyecto al path (sube dos niveles desde subcarpeta)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Configura el m√≥dulo de settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GEM.settings')
django.setup()

from Core.models import Asignatura, EvaluacionBase, Docente, AsignaturaImpartida

# Lista de asignaturas con su tipo (obligatoria o electiva) y nivel
asignaturas_data = [
    # Opcion por determinado
    ("Ninguna", False, 1),

    # Asignaturas Obligatorias 1¬∞ y 2¬∞ medio
    ("Lenguaje", False, 1),
    ("Matem√°ticas", False, 1),
    ("Historia", False, 1),
    ("Biolog√≠a", False, 1),
    ("F√≠sica", False, 1),
    ("Qu√≠mica", False, 1),
    ("Ingl√©s", False, 1),
    ("Educaci√≥n F√≠sica", False, 1),
    ("Arte", False, 1),
    ("M√∫sica", False, 1),
    ("Tecnolog√≠a", False, 1),

    ("Lenguaje", False, 2),
    ("Matem√°ticas", False, 2),
    ("Historia", False, 2),
    ("Biolog√≠a", False, 2),
    ("F√≠sica", False, 2),
    ("Qu√≠mica", False, 2),
    ("Ingl√©s", False, 2),
    ("Educaci√≥n F√≠sica", False, 2),
    ("Arte", False, 2),
    ("M√∫sica", False, 2),
    ("Tecnolog√≠a", False, 2),

    # Asignaturas Obligatorias 3¬∞ y 4¬∞ medio
    ("Lenguaje", False, 3),
    ("Matem√°ticas", False, 3),
    ("Historia", False, 3),
    ("Biolog√≠a", False, 3),
    ("F√≠sica", False, 3),
    ("Qu√≠mica", False, 3),
    ("Ingl√©s", False, 3),
    ("Educaci√≥n F√≠sica", False, 3),
    ("Filosof√≠a", False, 3),

    ("Lenguaje", False, 4),
    ("Matem√°ticas", False, 4),
    ("Historia", False, 4),
    ("Biolog√≠a", False, 4),
    ("F√≠sica", False, 4),
    ("Qu√≠mica", False, 4),
    ("Ingl√©s", False, 4),
    ("Educaci√≥n F√≠sica", False, 4),
    ("Filosof√≠a", False, 4),

    # Electivos 3¬∞ medio
    ("Filosof√≠a y √âtica", True, 3),
    ("Literatura y Escritura Creativa", True, 3),
    ("Biolog√≠a Avanzada", True, 3),
    ("Qu√≠mica Experimental", True, 3),
    ("Programaci√≥n y Rob√≥tica", True, 3),
    ("Teatro y Expresi√≥n Corporal", True, 3),
    ("Taller de Debate y Oratoria", True, 3),
    ("Educaci√≥n Ambiental y Sostenibilidad", True, 3),

    # Electivos 4¬∞ medio
    ("Psicolog√≠a y Desarrollo Humano", True, 4),
    ("Sociolog√≠a y Estudios Sociales", True, 4),
    ("F√≠sica Aplicada", True, 4),
    ("Matem√°tica Avanzada", True, 4),
    ("Historia del Arte y Cultura", True, 4),
    ("Estad√≠stica y An√°lisis de Datos", True, 4),
    ("Astronom√≠a y Ciencias del Espacio", True, 4),
    ("Investigaci√≥n Cient√≠fica y M√©todo Experimental", True, 4)
]

# Crear asignaturas y evaluaciones base
for nombre, es_electivo, nivel in asignaturas_data:
    asignatura, created = Asignatura.objects.get_or_create(
        nombre=nombre,
        nivel=nivel,  # Agregamos nivel a la b√∫squeda para permitir la misma asignatura en diferentes niveles
        defaults={
            "es_electivo": es_electivo
        }
    )

    if not created:
        # Si ya existe, aseguramos que el tipo est√© actualizado
        asignatura.es_electivo = es_electivo
        asignatura.save()

    if nombre != "Ninguna":
        # Evaluaciones base predeterminadas
        evaluaciones = [
            ("Prueba 1", 30.0, "Primera prueba parcial"),
            ("Prueba 2", 30.0, "Segunda prueba parcial"),
            ("Examen Final", 40.0, "Examen final del curso"),
        ]
        for nombre_eval, peso, desc in evaluaciones:
            EvaluacionBase.objects.get_or_create(
                asignatura=asignatura,
                nombre=nombre_eval,
                defaults={"ponderacion": peso, "descripcion": desc}
            )

print("‚úÖ Asignaturas y evaluaciones base creadas o actualizadas exitosamente.")

# --- Asignaci√≥n de profesores a electivos por especialidad ---
print("\nüîÑ Asignando profesores a electivos por especialidad...")

# Mapa de electivos a RUT de profesor especialista
mapa_electivos_profesor = {
    # 3er A√±o
    "Filosof√≠a y √âtica": "18913579",          # Paula Escobar
    "Literatura y Escritura Creativa": "19024680", # Ricardo Alarcon
    "Biolog√≠a Avanzada": "20802468",        # Rodrigo Castillo
    "Qu√≠mica Experimental": "20913579",       # Daniela Alvarez
    # 3er A√±o (Nuevos)
    "Programaci√≥n y Rob√≥tica": "10101010",
    "Teatro y Expresi√≥n Corporal": "10202020",
    "Taller de Debate y Oratoria": "10303030",
    "Educaci√≥n Ambiental y Sostenibilidad": "10808080",
    
    # 4to A√±o
    "Psicolog√≠a y Desarrollo Humano": "19246802", # Esteban Morales
    "Sociolog√≠a y Estudios Sociales": "19357913", # Francisca Bustos
    "F√≠sica Aplicada": "21024680",            # Victor Carrillo
    "Matem√°tica Avanzada": "21135792",          # Alejandra Mendez
    # 4to A√±o (Nuevos)
    "Historia del Arte y Cultura": "10404040",
    "Estad√≠stica y An√°lisis de Datos": "10505050",
    "Astronom√≠a y Ciencias del Espacio": "10606060",
    "Investigaci√≥n Cient√≠fica y M√©todo Experimental": "10707070"
}

for nombre_electivo, rut_docente in mapa_electivos_profesor.items():
    try:
        # Buscar el electivo y el docente
        electivo = Asignatura.objects.get(nombre=nombre_electivo, es_electivo=True)
        docente = Docente.objects.get(usuario__rut=rut_docente)

        # Generar un c√≥digo √∫nico para la asignatura impartida
        codigo_asignatura = f"ELEC-{electivo.nombre[:3].upper()}-{electivo.nivel}00"

        # Crear o actualizar la AsignaturaImpartida
        # Usamos update_or_create para evitar duplicados y permitir actualizar el docente
        impartida, created = AsignaturaImpartida.objects.update_or_create(
            asignatura=electivo,
            defaults={
                'docente': docente,
                'codigo': codigo_asignatura
            }
        )
        
        if created:
            print(f"  ‚úÖ Electivo '{electivo.nombre}' asignado a: {docente.usuario.nombre} {docente.usuario.apellido_paterno}")
        else:
            print(f"  üîÑÔ∏è Electivo '{electivo.nombre}' actualizado con docente: {docente.usuario.nombre} {docente.usuario.apellido_paterno}")

    except Asignatura.DoesNotExist:
        print(f"  ‚ö†Ô∏è No se encontr√≥ el electivo: {nombre_electivo}")
    except Docente.DoesNotExist:
        print(f"  ‚ö†Ô∏è No se encontr√≥ el docente con RUT: {rut_docente}")

print("\n‚úÖ Asignaci√≥n de profesores a electivos completada.")
